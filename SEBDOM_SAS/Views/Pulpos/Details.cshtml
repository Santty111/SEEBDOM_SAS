@model SEBDOM_SAS.Models.RegistroPulpo
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery antiforgery
@{
    ViewData["Title"] = "Detalles del Registro - " + Model.Fecha.ToString("dd/MM/yyyy");
    var token = antiforgery.GetAndStoreTokens(Context).RequestToken;
}

<input type="hidden" id="RequestVerificationToken" value="@token" />

<div class="pulpo-details-container">
    <h1 class="pulpo-details-header">
        <i class="fas fa-fish me-2"></i>@ViewData["Title"]
    </h1>

    <!-- Resumen por Código -->
    <div class="pulpo-card card">
        <div class="pulpo-card-header card-header">
            <h4 class="mb-0"><i class="fas fa-list-ol me-2"></i>Resumen por Código</h4>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="pulpo-table table">
                    <thead>
                        <tr>
                            <th><i class="fas fa-barcode me-1"></i>Código</th>
                            <th><i class="fas fa-truck me-1"></i>Proveedor</th>
                            <th><i class="fas fa-dollar-sign me-1"></i>Precio Normal</th>
                            <th><i class="fas fa-tag me-1"></i>Precio Especial</th>
                            <th><i class="fas fa-weight-hanging me-1"></i>Peso Total (lbs)</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var grupo in Model.ProveedoresPrecios.GroupBy(p => p.Codigo))
                        {
                            var proveedor = grupo.First();
                            <tr data-proveedor-id="@proveedor.Id">
                                <td>@proveedor.Codigo</td>
                                <td class="editable" data-field="nombre">@proveedor.NombreProveedor</td>
                                <td class="editable" data-field="precioNormal">@(proveedor.PrecioNormal?.ToString("C") ?? "-")</td>
                                <td class="editable" data-field="precioEspecial">@(proveedor.PrecioEspecial?.ToString("C") ?? "-")</td>
                                <td class="peso-total" data-codigo="@proveedor.Codigo">
                                    @Model.PesoTotalPorCodigo.GetValueOrDefault(proveedor.Codigo, 0).ToString("N2")
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Añadir Nueva Gaveta -->
    <div class="pulpo-card card">
        <div class="pulpo-card-header card-header bg-success">
            <h4 class="mb-0"><i class="fas fa-plus-circle me-2"></i>Añadir Nueva Gaveta</h4>
        </div>
        <div class="card-body">
            <form asp-action="AddGaveta" method="post">
                <input type="hidden" name="registroId" value="@Model.Id" />

                <div class="row">
                    <div class="col-md-3">
                        <div class="pulpo-form-group">
                            <label class="pulpo-form-label"><i class="fas fa-barcode me-2"></i>Código</label>
                            <select name="codigo" class="pulpo-form-control form-select" required>
                                @foreach (var codigo in Model.CodigosLista)
                                {
                                    <option value="@codigo">@codigo</option>
                                }
                            </select>
                        </div>
                    </div>

                    <div class="col-md-3">
                        <div class="pulpo-form-group">
                            <label class="pulpo-form-label"><i class="fas fa-hashtag me-2"></i>Número de Gaveta</label>
                            <input type="number" name="numeroGaveta" class="pulpo-form-control form-control" required>
                        </div>
                    </div>

                    <div class="col-md-3">
                        <div class="pulpo-form-group">
                            <label class="pulpo-form-label"><i class="fas fa-fish me-2"></i>Cantidad de Pulpos</label>
                            <input type="number" name="cantidad" class="pulpo-form-control form-control" required>
                        </div>
                    </div>

                    <div class="col-md-3">
                        <div class="pulpo-form-group">
                            <label class="pulpo-form-label"><i class="fas fa-weight me-2"></i>Peso (lbs)</label>
                            <input type="number" step="0.01" name="pesoLbs" class="pulpo-form-control form-control" required>
                        </div>
                    </div>
                </div>

                <div class="text-end mt-3">
                    <button type="submit" class="btn btn-pulpo-action btn-pulpo-primary">
                        <i class="fas fa-plus me-2"></i>Añadir Gaveta
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Gavetas Registradas -->
    <div class="pulpo-card card">
        <div class="pulpo-card-header card-header bg-info">
            <h4 class="mb-0"><i class="fas fa-boxes me-2"></i>Gavetas Registradas</h4>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="pulpo-table table">
                    <thead>
                        <tr>
                            <th><i class="fas fa-barcode me-1"></i>Código</th>
                            <th><i class="fas fa-hashtag me-1"></i>Gaveta</th>
                            <th><i class="fas fa-fish me-1"></i>Pulpos</th>
                            <th><i class="fas fa-weight me-1"></i>Peso (lbs)</th>
                            <th><i class="fas fa-info-circle me-1"></i>Estado</th>
                            <th><i class="fas fa-cog me-1"></i>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var gaveta in Model.Gavetas.OrderBy(g => g.Codigo).ThenBy(g => g.NumeroGaveta))
                        {
                            <tr data-gaveta-id="@gaveta.Id">
                                <td>@gaveta.Codigo</td>
                                <td class="editable" data-field="numeroGaveta">@gaveta.NumeroGaveta</td>
                                <td class="editable" data-field="cantidad">@gaveta.CantidadPulpos</td>
                                <td class="editable" data-field="pesoLbs">@gaveta.PesoLbs.ToString("N2")</td>
                                <td>
                                    @if (gaveta.Disponible)
                                    {
                                        <span class="badge-disponible bg-success">
                                            <i class="fas fa-check-circle me-1"></i> Disponible
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="badge-no-disponible bg-danger">
                                            <i class="fas fa-times-circle me-1"></i> No disponible
                                        </span>
                                    }
                                </td>
                                <td>
                                    <form asp-action="ToggleDisponibilidad" method="post">
                                        <input type="hidden" name="gavetaId" value="@gaveta.Id" />
                                        <button type="submit" class="btn btn-sm @(gaveta.Disponible ? "btn-warning" : "btn-success")">
                                            <i class="fas @(gaveta.Disponible ? "fa-times" : "fa-check") me-1"></i>
                                            @(gaveta.Disponible ? "No Disponible" : "Disponible")
                                        </button>
                                    </form>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Acciones finales -->
    <div class="d-flex justify-content-between mt-4">
        <a asp-action="DetailsByDate" asp-route-fecha="@Model.Fecha.ToString("yyyy-MM-dd")"
           class="btn btn-secondary btn-pulpo-action">
            <i class="fas fa-arrow-left me-2"></i>Volver a la fecha
        </a>

        <form asp-action="Delete" method="post" class="d-inline">
            <input type="hidden" name="id" value="@Model.Id" />
            <button type="submit" class="btn btn-pulpo-action btn-pulpo-danger"
                    onclick="return confirm('¿Estás seguro de eliminar este registro COMPLETO? Se eliminarán todos los datos asociados.')">
                <i class="fas fa-trash-alt me-2"></i>Eliminar Registro
            </button>
        </form>
    </div>
</div>



@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        $(document).ready(function() {
            // Función para hacer campos editables
            function setupEditableFields() {
                $('.editable').off('click').on('click', function() {
                    var $cell = $(this);
                    var originalValue = $cell.text().replace('$', '').replace('-', '').trim();
                    var field = $cell.data('field');
                    var isCurrency = field.includes('precio');
                    var isNumber = isCurrency || field === 'pesoLbs' || field === 'cantidad' || field === 'numeroGaveta';

                    var $input = $('<input>', {
                        type: isNumber ? 'number' : 'text',
                        value: originalValue,
                        class: 'form-control form-control-sm'
                    });

                    if (isNumber) {
                        $input.attr('step', isCurrency || field === 'pesoLbs' ? '0.01' : '1');
                    }

                    $cell.html($input);
                    $input.focus();

                    function saveChanges() {
                        var newValue = $input.val().trim();
                        if (newValue !== originalValue) {
                            var $row = $cell.closest('tr');
                            var isProveedor = $row.data('proveedor-id') !== undefined;
                            var id = isProveedor ? $row.data('proveedor-id') : $row.data('gaveta-id');

                            var data = {
                                id: id,
                                field: field,
                                value: newValue
                            };

                            $.ajax({
                                url: '/Pulpos/UpdateField',
                                type: 'POST',
                                headers: {
                                    'RequestVerificationToken': $('#RequestVerificationToken').val()
                                },
                                data: data,
                                success: function(response) {
                                    if (response.success) {
                                        // Formatear el nuevo valor
                                        if (isCurrency) {
                                            $cell.html('$' + parseFloat(newValue).toFixed(2));
                                        } else if (field === 'pesoLbs') {
                                            $cell.html(parseFloat(newValue).toFixed(2));
                                        } else {
                                            $cell.html(newValue);
                                        }

                                        // Si se editó el peso, recargar para actualizar totales
                                        if (field === 'pesoLbs') {
                                            location.reload();
                                        }
                                    } else {
                                        showToast('Error', response.message, 'danger');
                                        $cell.html(originalValue);
                                    }
                                    setupEditableFields(); // Reconfigurar los eventos
                                },
                                error: function() {
                                    showToast('Error', 'Error al guardar los cambios', 'danger');
                                    $cell.html(originalValue);
                                    setupEditableFields(); // Reconfigurar los eventos
                                }
                            });
                        } else {
                            $cell.html(originalValue);
                            setupEditableFields(); // Reconfigurar los eventos
                        }
                    }

                    $input.on('blur', saveChanges);
                    $input.on('keypress', function(e) {
                        if (e.which === 13) { // Enter key
                            saveChanges();
                        }
                    });
                });
            }

            // Función para mostrar notificaciones Toast
            function showToast(title, message, type) {
                const toast = $(`
                    <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 11">
                        <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
                            <div class="toast-header bg-${type} text-white">
                                <strong class="me-auto">${title}</strong>
                                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Close"></button>
                            </div>
                            <div class="toast-body">
                                ${message}
                            </div>
                        </div>
                    </div>
                `);

                $('body').append(toast);

                // Eliminar el toast después de 5 segundos
                setTimeout(() => {
                    toast.remove();
                }, 5000);
            }

            // Inicializar los campos editables
            setupEditableFields();
        });
    </script>
}