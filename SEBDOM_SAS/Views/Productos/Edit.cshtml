@model SEBDOM_SAS.Models.Producto

@{
    ViewData["Title"] = "Editar Producto";
}

<h1>@ViewData["Title"]</h1>
<hr />

<div class="row">
    <div class="col-md-6">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Id" />

            <!-- Nombre del Producto (solo lectura) -->
            <div class="form-group mb-3">
                <label asp-for="NombreProducto" class="form-label fw-bold"></label>
                <input asp-for="NombreProducto" class="form-control" readonly />
            </div>

            <!-- Unidad de Medida -->
            <div class="form-group mb-3">
                <label asp-for="UnidadMedida" class="form-label fw-bold"></label>
                <div class="btn-group" role="group">
                    @foreach (var unidad in Enum.GetValues(typeof(UnidadMedida)))
                    {
                        <input type="radio" asp-for="UnidadMedida" value="@unidad" class="btn-check" id="unidad-@unidad" />
                        <label class="btn btn-outline-primary" for="unidad-@unidad">
                            @unidad
                        </label>
                    }
                </div>
                <span asp-validation-for="UnidadMedida" class="text-danger"></span>
            </div>

            <!-- Entrada -->
            <div class="form-group mb-3">
                <label asp-for="Entrada" class="form-label fw-bold"></label>
                <div class="input-group">
                    <input asp-for="Entrada" class="form-control" min="0" step="0.001" />
                    <span class="input-group-text">@Model.UnidadMedida</span>
                </div>
                <span asp-validation-for="Entrada" class="text-danger"></span>
            </div>

            <!-- Salida -->
            <div class="form-group mb-3">
                <label asp-for="Salida" class="form-label fw-bold"></label>
                <div class="input-group">
                    <input asp-for="Salida" class="form-control" min="0" max="@Model.StockActual" step="0.001" />
                    <span class="input-group-text">@Model.UnidadMedida</span>
                </div>
                <span asp-validation-for="Salida" class="text-danger"></span>
                <small class="form-text text-muted">Máximo disponible: @Model.StockActual.ToString("N3")</small>
            </div>

            <!-- Stock Actual -->
            <div class="form-group mb-4">
                <label class="form-label fw-bold">Stock Actual</label>
                <div class="input-group">
                    <input value="@Model.StockActual.ToString("N3")" class="form-control" readonly />
                    <span class="input-group-text">@Model.UnidadMedida</span>
                </div>
            </div>

            <!-- Botones -->
            <div class="form-group">
                <button type="submit" class="btn btn-primary me-2">
                    <i class="fas fa-save"></i> Actualizar
                </button>
                <a asp-action="Index" class="btn btn-secondary">
                    <i class="fas fa-arrow-left"></i> Volver al Listado
                </a>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        // Validación en tiempo real para Salida
        document.querySelector('input[name="Salida"]').addEventListener('input', function() {
            const maxStock = parseFloat('@Model.StockActual');
            const salida = parseFloat(this.value) || 0;

            if (salida > maxStock) {
                this.setCustomValidity('No puede superar el stock actual');
            } else {
                this.setCustomValidity('');
            }
        });

        // Deshabilitar Entrada si hay Salida y viceversa
        const entradaInput = document.querySelector('input[name="Entrada"]');
        const salidaInput = document.querySelector('input[name="Salida"]');

        [entradaInput, salidaInput].forEach(input => {
            input.addEventListener('input', function() {
                if (this.value && parseFloat(this.value) > 0) {
                    const otherInput = this === entradaInput ? salidaInput : entradaInput;
                    otherInput.value = '';
                }
            });
        });
    </script>
}